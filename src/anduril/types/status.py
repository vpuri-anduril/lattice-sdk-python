# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .google_protobuf_any import GoogleProtobufAny


class Status(UniversalBaseModel):
    """
    The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
    """

    code: typing.Optional[int] = pydantic.Field(default=None)
    """
    The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
    """

    message: typing.Optional[str] = pydantic.Field(default=None)
    """
    A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
    """

    details: typing.Optional[typing.List[GoogleProtobufAny]] = pydantic.Field(default=None)
    """
    A list of messages that carry the error details.  There is a common set of message types for APIs to use.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
