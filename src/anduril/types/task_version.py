# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class TaskVersion(UniversalBaseModel):
    """
    Version of a Task.
    """

    task_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="taskId")] = pydantic.Field(
        default=None
    )
    """
    The unique ID for this Task.
    """

    definition_version: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="definitionVersion")] = (
        pydantic.Field(default=None)
    )
    """
    Increments on definition (i.e. not TaskStatus) change. 0 is unset, starts at 1 on creation.
    """

    status_version: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="statusVersion")] = (
        pydantic.Field(default=None)
    )
    """
    Increments on changes to TaskStatus. 0 is unset, starts at 1 on creation.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
